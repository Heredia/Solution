$fg-columns: 12 !default;
$fg-gutter: 0 !default;

$fg-breakpoints: ( (xs), (sm, 768px), (md, 992px), (lg, 1200px) ) !default;

@function get-col-percent($column-num) {
    @return $column-num / $fg-columns * 100%;
}

@mixin spacing( $value, $type: margin, $orientation: vertical ) {
    @if $orientation == vertical {
        #{ $type }-top: $value;
        #{ $type }-bottom: $value;
    }
    @else {
        #{ $type }-left: $value;
        #{ $type }-right: $value;
    }
}

.container {
    margin: 0 auto;
    width: 100%;
}

.row {
    box-sizing: border-box;
    display: flex;
    flex-direction: row;
    flex-wrap: wrap;
    justify-content: center;
    margin: 0;
}

.row-space {
    margin: 1rem 0;
}

.col-space {
    margin: 0 1rem;
}

%col {
    box-sizing: border-box;
    display: flex;
    flex-direction: column;
    flex-grow: 0;
    flex-shrink: 0;
    justify-content: center;
    @include spacing( ( $fg-gutter ), padding, horizontal );
}

%col-flex {
    @extend %col;
    flex-grow: 1;
    flex-basis: 0;
    max-width: 100%;
}

@mixin grid-base( $namespace ) {
    .col-#{$namespace} {
        @extend %col-flex;
    }

    @for $i from 1 through $fg-columns {
        .col-#{$namespace}-#{$i} {
            @extend %col;
        }
    }
}

@mixin grid-sizes( $namespace ) {
    @for $i from 1 through $fg-columns {
        .col-#{$namespace}-#{$i} {
            flex-basis: get-col-percent($i);
            max-width: get-col-percent($i);
        }
    }

    @for $i from 1 through $fg-columns {
        @if ( $i != $fg-columns ) {
            .col-#{$namespace}-offset-right-#{$i} {
                margin-right: get-col-percent($i);
            }

            .col-#{$namespace}-offset-left-#{$i} {
                margin-left: get-col-percent($i);
            }
        }
    }
}

@each $val in $fg-breakpoints {
    $namespace: nth($val, 1);
    @include grid-base( $namespace );
}

@each $val in $fg-breakpoints {
    @if length($val) == 1 {
        $namespace: nth($val, 1);
        @include grid-sizes( $namespace );
    }
    @else {
        $namespace: nth($val, 1);
        $size: nth($val, 2);

        @media only screen and (min-width: #{$size}) {
            @include grid-sizes( $namespace );
        }
    }
}

.hidden {
    visibility: hidden;
    display: none;
}

.visible {
    visibility: visible;
    display: block;
}

.left, .left * {
    text-align: left;
}

.right, .right * {
    text-align: right;
}

.center, .center * {
    justify-content: center;
    text-align: center;
}

.justify, .justify * {
    text-align: justify;
}